<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_run</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//setting variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 5;
movespeed = 5;
jumps = 0;
global.moveLock = false;
global.playerHp = 18;
global.keyObtained = 0;
global.playerBlocking = 0;
global.playerIsAlive = 1;
godModeEnabled = false;
mymaxjumps = 2;
counter = 0;
recently_hit=false;
recently_hitGold=false;
move_lock = false;
wallJumping = false;
grounded = false;
attacking = 0;
attacked_recent = 0;
ini_open("SaveNew.sav");
obj_playerPlaceHolder.x = ini_read_real("Save1","xLocation",96);
obj_playerPlaceHolder.y = ini_read_real("Save1","yLocation",640);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vsp = 0;
vsp_f = .0;
grv = 0.2;
frc = 0.4;
acc = 0.5;
jmp = -5
hsp_max = 1.6;
vsp_max = 5;
jbuff = 0;
image_speed = 0.2;
ladder = false;
stepcount = 0;
steppitch = 0.8;

gamepad_set_axis_deadzone(0,0.4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resetting Attack
attacked_recent = 0;
attacking = 0;
move_lock = false
global.moveLock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Un-goldenize
global.moveLock = false;
move_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recently_hit = false;
recently_hitGold = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Player Functions
if(global.pause) exit;

//Get the player's input
key_down = keyboard_check_direct(vk_down) || (gamepad_axis_value(0,gp_axislv) &gt; 0);
key_right = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
key_left = -(keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) &lt; 0 ));
key_up = keyboard_check_direct(vk_up) || (gamepad_axis_value(0,gp_axislv) &lt; 0);
key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0,gp_face1));
key_attack = keyboard_check_pressed(ord('A')) || (gamepad_button_check_pressed(0,gp_shoulderrb));
key_attack_release = keyboard_check_released(ord('A')) || (gamepad_button_check_released(0,gp_shoulderrb));
key_heal = keyboard_check_pressed(ord('F')) || (gamepad_button_check_pressed(0,gp_shoulderl));
key_block = keyboard_check_direct(ord('S')) || (gamepad_button_check(0,gp_shoulderr));
key_grenade = keyboard_check_pressed(ord('G')) || (gamepad_button_check_pressed(0,gp_shoulderlb));

//-----------------------
// God Mode (Comment all this shit out later)
key_god = (gamepad_button_check(0,gp_select)) || keyboard_check_direct(vk_backspace);
if ((key_god) &amp;&amp; (key_block))
{
    godModeEnabled = true;
    if !audio_is_playing(snd_bossDefeated)
    {
        audio_play_sound(snd_bossDefeated, 0, false);
    }
}
if godModeEnabled = true
{
    global.playerHp = 18
}
// -----------------------

// Global variable for others to interact easily with player and lock him
if global.moveLock = true
{
    move_lock = true
    grav = 0;
    hsp = 0;
    vsp = 0;
    movespeed = 0;
    move = 0;
}

//React to inputs
if (!key_attack &amp;&amp; !key_down &amp;&amp; (move_lock=false))
{
    move = key_left + key_right;
}
hsp = move * movespeed;

if (vsp &lt; 10) vsp += grav;


if (place_meeting(x,y+1,par_tilesets))
{
    jumps = mymaxjumps;
}
//normal double jumping code
if((key_jump) &amp;&amp; (jumps &gt; 0) &amp;&amp; (move_lock=false))
{
    jumps -= 1;
    vsp = -jumpspeed;
    vsp = key_jump * -jumpspeed
    audio_play_sound(jump_sound, 1, false);
} 

// Wall Jumping Code
if ((place_meeting(x+1,y,par_tilesets)) &amp;&amp; (grounded = false) &amp;&amp; (ladder = false))
{
    sprite_index = spr_wallJump;
    wallJumping = true;
    audio_stop_sound(snd_footsteps1);
    audio_stop_sound(snd_footsteps2);
}
else wallJumping = false;
if ((place_meeting(x-1,y,par_tilesets)) &amp;&amp; (grounded = false) &amp;&amp; (ladder = false))
{
    sprite_index = spr_wallJump;
    wallJumping = true;
    audio_stop_sound(snd_footsteps1);
    audio_stop_sound(snd_footsteps2);
}
if (global.wallJumpAvailable = 1)
{
    if ((key_jump) &amp;&amp; (place_meeting(x+1,y,par_tilesets)) &amp;&amp; (grounded = false) &amp;&amp; (ladder = false))
    {
        vsp = -jumpspeed;
        move = -1;
        move_lock = true
        jumps += 1;
        alarm[1] = 30;
    }
    if ((key_jump) &amp;&amp; (place_meeting(x-1,y,par_tilesets)) &amp;&amp; (grounded = false) &amp;&amp; (ladder = false))
    {
    vsp = -jumpspeed;
    move = 1;
    jumps -= 1;
    move_lock = true
    alarm[1]= 30;
    }
}


 
//Horizontal Collision
if (place_meeting(x+hsp,y,par_tilesets))
{
    while(!place_meeting(x+sign(hsp),y,par_tilesets))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
if (place_meeting(x+hsp,y,obj_minionTutorial))
{
    while(!place_meeting(x+sign(hsp),y,obj_minionTutorial))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;
//On Ground Check
if place_meeting(x,y+1,par_tilesets)
{
    grounded = true;
}
else
{
    grounded = false;
}
 
//Vertical Collision
if (place_meeting(x,y+vsp,par_tilesets))
{
    while(!place_meeting(x,y+sign(vsp),par_tilesets))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
if (place_meeting(x,y+vsp,obj_minionTutorial))
{
    while(!place_meeting(x,y+sign(vsp),obj_minionTutorial))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//animation
if(move!=0)image_xscale = move;
if(place_meeting(x,y+1,par_tilesets))
{
    if((grounded = true) &amp;&amp; (move!= 0) &amp;&amp; (!recently_hitGold)) 
    {
        sprite_index = spr_run;
        if ((!audio_is_playing(snd_footsteps1)) &amp;&amp; !audio_is_playing(snd_footsteps2))
        {
        audio_play_sound((choose(snd_footsteps1,snd_footsteps2)), 1, false);
        }
    }
    if ((!key_attack) &amp;&amp; (move=0) &amp;&amp; (grounded = true) &amp;&amp; (!recently_hitGold) &amp;&amp; (attacking = 0))
    {
        sprite_index = spr_idle;
        audio_stop_sound(snd_footsteps1);
        audio_stop_sound(snd_footsteps2);
    }
}
else
{
    if((vsp &lt; 0) &amp;&amp; (ladder = false) &amp;&amp; (grounded = false)) 
    {
        sprite_index = spr_jump;
        audio_stop_sound(snd_footsteps1);
        audio_stop_sound(snd_footsteps2);
    }
    else 
    {
        if ((vsp &gt; 0) &amp;&amp; (ladder = false) &amp;&amp; (grounded = false) &amp;&amp; (wallJumping = false))
        {
        sprite_index = spr_fall;
        audio_stop_sound(snd_footsteps1);
        audio_stop_sound(snd_footsteps2);
        }
    }
}
if(key_down) &amp;&amp; (ladder = false)
{
    movespeed=0;
    hsp = 0;
    sprite_index = spr_duck;
    if (audio_is_playing(snd_footsteps1) || audio_is_playing(snd_footsteps2))
    {
        audio_stop_sound(snd_footsteps1)
        audio_stop_sound(snd_footsteps2)
    }
}
else
{
    movespeed=5;
}

// Ladder
if (key_up || key_down)
{
    if place_meeting(x,y,par_ladder) ladder = true;
}

if (ladder)
{
    vsp=0;
    grav=0;
    if (attacking != 1)
    {
        sprite_index = spr_climbing;
    }
    if attacking = 1
    {
        sprite_index = spr_attack;
    }
    //hsp=0;
    if ((key_up = false) &amp;&amp; (key_down = false))
    {
        image_index=2;
    }
    if (key_up)
    {
        vsp = -2;
    }
    if (key_down)
    {
        vsp = 2;
    }
    if !place_meeting(x,y,par_ladder)
    {
        ladder = false;
        grav = 0.2;
    }
    if (key_jump)
    {
        ladder = false;
        grav = 0.2;
    }
}

if (ladder = false)
{
    grav = 0.2
}

//Attacking
if ((key_attack) &amp;&amp; (!recently_hitGold) &amp;&amp; (attacked_recent = 0) &amp;&amp; (key_block = false))
{
    attacking = 1;
    attacked_recent = 1;
    alarm[3] = 20;
}
if (attacking = 1)
{
    move_lock = true;
    global.moveLock = true;
    move=0;
    image_speed = 0.15;
    hsp = 0;
    // Animate
    sprite_index = spr_attack;
    //SFX
    if (image_index &gt; 0) &amp;&amp; (image_index &lt;0.2)
    {
        audio_play_sound((choose(snd_swordswing,snd_swordswing2,snd_swordswing3,snd_swordswing4)), 1, false);
    }
    //Hitbox
    if (image_index &gt;=0) &amp;&amp; (image_index &lt;=1)
    {
        with(instance_create(x,y,obj_hitbox))
        {
            image_xscale=other.image_xscale
        }
        /*with(instance_create(x,y,obj_hitbox))
        {
            image_xscale = other.image_xscale;
            with(instance_place(x,y,par_enemy2))
            {
                if (hit == 0)
                {
                    hit = 1;
                    vsp= -3;
                    hsp = sign(x - other.x)*4;
                    image_xscale = sign (hsp);
                }
                if (hit == 1)
                {
                    alarm[0] = 1 * room_speed;
                }
            }
            with(instance_place(x,y,par_enemy))
            {
                if (hit == 0)
                {
                    hit =1;
                    vsp= -3;
                    hsp = sign(x - other.x)*4;
                    image_xscale = sign (hsp);
                }
                if (hit == 1)
                {

                    alarm[0] = 1 * room_speed;
                }
            }
        }*/
    }
}

//Blocking

if((key_block) &amp;&amp; (!recently_hitGold))
{
    global.playerBlocking = 1;
    movespeed=0;
    hsp = 0;
    sprite_index = spr_block;
}
else
{
    global.playerBlocking = 0;
}

//Healing and Grenades
if (global.holyWater &gt;= 1)
{
    if ((key_heal) &amp;&amp; (!recently_hitGold))
    {
        global.playerHp = 18;
        global.holyWater --;
    }
    if ((key_grenade) &amp;&amp; (!recently_hitGold))
    {
        instance_create(x,y-5,obj_grenade);
        obj_grenade.vspeed = obj_grenade.vsp;
        obj_grenade.hspeed = obj_grenade.hsp * image_xscale;
        global.holyWater --;
    }
}
    

//Enemy Damage (Weak)
if (place_meeting(x,y,par_enemy))
{
    if global.playerBlocking = 1 //Blocking Handler
    { 
        if !recently_hit
        {
            global.playerHp -= 1;
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            hsp =-5;
            audio_play_sound(snd_shieldBlock, 0, false);
        }
    }
    if global.playerBlocking = 0
    {
        if !recently_hit
        {
            if ((!audio_is_playing(snd_grunt_01)) &amp;&amp; (!audio_is_playing(snd_grunt_02)) &amp;&amp; (!audio_is_playing(snd_grunt_03)))
            {
                audio_play_sound((choose(snd_grunt_01,snd_grunt_02,snd_grunt_03)), 1, false);
            }
            global.playerHp -= 2;
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            vsp=-5;
            hsp =-5;
        }
    }
}
// Enemy Damage (Medium)
if (place_meeting(x,y,par_enemy2))
{
    if global.playerBlocking = 1
    { 
        if !recently_hit
        {
            global.playerHp -= 1; // Blocking Handler
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            hsp =-5;
            audio_play_sound(snd_shieldBlock, 0, false);
        }
    }
    if global.playerBlocking = 0
    {
        if !recently_hit
        {
            if ((!audio_is_playing(snd_grunt_01)) &amp;&amp; (!audio_is_playing(snd_grunt_02)) &amp;&amp; (!audio_is_playing(snd_grunt_03)))
            {
                audio_play_sound((choose(snd_grunt_01,snd_grunt_02,snd_grunt_03)), 1, false);
            }
            global.playerHp -= 4;
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            vsp=-5;
            hsp =-5;
        }
    }
}
// Enemy Damage (Strong AF boi)
if (place_meeting(x,y,par_enemy3))
{
    if global.playerBlocking = 1
    { 
        if !recently_hit
        {
            global.playerHp -= 1; // Blocking Handler
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            hsp =-5;
            audio_play_sound(snd_shieldBlock, 0, false);
        }
    }
    if global.playerBlocking = 0
    {
        if !recently_hit
        {
            if ((!audio_is_playing(snd_grunt_01)) &amp;&amp; (!audio_is_playing(snd_grunt_02)) &amp;&amp; (!audio_is_playing(snd_grunt_03)))
            {
                audio_play_sound((choose(snd_grunt_01,snd_grunt_02,snd_grunt_03)), 1, false);
            }
            global.playerHp -= 6;
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            vsp=-5;
            hsp =-5;
        }
    }
}
// Enemy Damage (Greed Gold Effect)
if (place_meeting(x,y,par_enemyGreed))
{
    if global.playerBlocking = 1
    { 
        if !recently_hit
        {
            global.playerHp -= 1; // Blocking Handler
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            hsp =-5;
            audio_play_sound(snd_shieldBlock, 0, false);
        }
    }
    if global.playerBlocking = 0
    {
        if !recently_hit
        {
            if ((!audio_is_playing(snd_grunt_01)) &amp;&amp; (!audio_is_playing(snd_grunt_02)) &amp;&amp; (!audio_is_playing(snd_grunt_03)))
            {
                audio_play_sound((choose(snd_grunt_01,snd_grunt_02,snd_grunt_03)), 1, false);
            }
            global.playerHp -= 4;
            recently_hit = true;
            recently_hitGold = true;
            sprite_index = spr_gold;
            global.moveLock = true;
            alarm[2] = 1 * room_speed;
            alarm[0] = 1 * room_speed;
        }
    }
}

// Enemy Damage (Sloth Near Insta-kill)
if (place_meeting(x,y,par_enemySloth))
{
    if global.playerBlocking = 1
    { 
        if !recently_hit
        {
            global.playerHp -= 1; // Blocking Handler
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            hsp =-5;
            audio_play_sound(snd_shieldBlock, 0, false);
        }
    }
    if global.playerBlocking = 0
    {
        if !recently_hit
        {
            if ((!audio_is_playing(snd_grunt_01)) &amp;&amp; (!audio_is_playing(snd_grunt_02)) &amp;&amp; (!audio_is_playing(snd_grunt_03)))
            {
                audio_play_sound((choose(snd_grunt_01,snd_grunt_02,snd_grunt_03)), 1, false);
            }
            global.playerHp -= 9;
            recently_hit = true;
            alarm[0] = 1 * room_speed;
            vsp=-5;
            hsp =-5;
        }
    }
}

//Dying
if (global.playerHp &lt;= 0)
{
    instance_create(x,y,object_screefade2);
    global.playerIsAlive = 0;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Temp Invincibility Tracker
counter++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//save and load 

if( file_exists("Save.sav")) file_delete("Save.sav");
var Savefile = file_text_open_write("Save.sav");
var savedroom = room;
file_text_write_real(Savefile,savedroom);
file_text_close(Savefile);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((recently_hit) &amp;&amp; (!recently_hitGold))
{
    if counter mod 5 = 0
    {
        draw_self();
    }
    else
    {
        draw_sprite_ext(spr_idle,0,x,y,1,1,0,c_white,0.25);
    }
}
if (!recently_hit)
{
    draw_self();
}
if (recently_hitGold)
{
    if counter mod 5 = 0
    {
        draw_self();
    }
}
/*
else
{
    draw_self();
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG PURPOSES. De-comment below line to press R to respawn
// Decomment the line below if R is for respawn
//global.playerHp=0

// Decomment the line below if R is for infinite heal
global.playerHp=18
// Decomment the line below if R gives you a key
global.keyObtained = 1;

//--------------------------------

// Decomment the line below if R enables WALL JUMP
//global.wallJumpAvailable = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
