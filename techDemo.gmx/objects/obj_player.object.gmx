<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0;
hsp_f = .0;
vsp = 0;
vsp_f = .0;
grv = 0.2;
frc = 0.4;
acc = 0.5;
jmp = -5
hsp_max = 2.6;
vsp_max = 5;
jbuff = 0;
image_speed = 0.2;

stepcount = 0;
steppitch = 0.8;

enum st
{
    normal,
    attack
}
state = st.normal

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Logic


switch(state)
{
    case st.normal:
    {
        //====Tick
        if (jbuff &gt; 0) jbuff--;
        vsp += grv;
        
        
        //====Ground Check
        if (place_meeting(x,y+1,par_wall)) 
        {
            if (jbuff == 0)
            {
                //Just Landed
                audio_sound_pitch(snd_step,0.4);
                audio_play_sound(snd_step,0,0);
            }
            jbuff = 4;
        }
        
        //====Get Inputs
        var move;
        move = -(keyboard_check_direct(vk_left) || keyboard_check_direct(ord("A"))) + (keyboard_check_direct(vk_right) || keyboard_check_direct(ord("D")));
        hsp += acc * move;
        
        if (jbuff &gt; 0) 
        {
            if (keyboard_check_pressed(vk_shift))
            {
                vsp = jmp;
                jbuff = 0;
                repeat(choose(2,3)) instance_create(x,bbox_bottom,obj_dust);
                audio_sound_pitch(snd_step,1.2)
                audio_play_sound(snd_step,0,0);
            }
            if (keyboard_check_pressed(vk_space)) &amp;&amp; (jbuff == 4)
            {
                state = st.attack;
                image_index = 0;
                sprite_index = spr_attack;
                break;
            }
        }
        else
        {
            //Air inputs
        }
        
        //====Friction
        if (move == 0) hsp = Approach(hsp,0,frc);

        
        Player_MoveCollide();
        
        //====Animate
        if (sign(hsp_final) != 0) image_xscale = sign(hsp_final);
        if (abs(hsp_final) &gt; 0) 
        {
            sprite_index = spr_hw; 
            stepcount++;
        }
        else 
        {
            sprite_index = spr_h;
            stepcount = 0;
        }
        if (jbuff == 0)
        {
            if (vsp_final &lt; 0) sprite_index = spr_hj; else sprite_index = spr_hf;
            stepcount = 0;
        }
        
        
        //====Footstep
        if (stepcount &gt; 12)
        {
            stepcount = 0;
            if (steppitch == 0.8) steppitch = 0.6 else steppitch = 0.8;
            audio_sound_pitch(snd_step,steppitch)
            audio_play_sound(snd_step,0,0);
        }
        break;
    }
    
    case st.attack:
    {
    
        //====Friction
        hsp = Approach(hsp,0,frc);
        vsp = Approach(vsp,0,frc);
        
        //====Animate
        sprite_index = spr_attack;
        
        //====Hitbox
        if (image_index &gt;= 1) &amp;&amp; (image_index &lt;= 3)
        {
            with (instance_create(x,y,obj_hitbox))
            {
                image_xscale = other.image_xscale;
                with (instance_place(x,y,par_enemy))
                {
                    if (hit == 0)
                    {
                        hit = 1;
                        vsp = -3;
                        hsp = sign(x - other.x) * 4;
                        image_xscale = sign(hsp);
                    }
                }
            }
        }
        Player_MoveCollide();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_attack) state = st.normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
